<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://3677065.github.io/walter/</id>
    <title>Walter小站</title>
    <updated>2020-09-01T20:14:32.439Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://3677065.github.io/walter/"/>
    <link rel="self" href="https://3677065.github.io/walter/atom.xml"/>
    <subtitle>搬砖的点滴</subtitle>
    <logo>https://3677065.github.io/walter/images/avatar.png</logo>
    <icon>https://3677065.github.io/walter/favicon.ico</icon>
    <rights>All rights reserved 2020, Walter小站</rights>
    <entry>
        <title type="html"><![CDATA[浅谈Swift符号裁剪]]></title>
        <id>https://3677065.github.io/walter/post/qian-tan-swift-fu-hao-cai-jian/</id>
        <link href="https://3677065.github.io/walter/post/qian-tan-swift-fu-hao-cai-jian/">
        </link>
        <updated>2020-09-01T19:58:50.000Z</updated>
        <content type="html"><![CDATA[<h3 id="背景">背景</h3>
<p>总所周知，Objective-C是一门具有动态性的语言，在编译时，并不能决定真正调用哪个函数。而跟OC不一样，<br>
swift是一门静态语言，并不具备OC的动态性，函数的实际调用在编译时已经被决定。因此OC的方法没有被调用，符号也会留在最终的二进制文件内，那么对于Swfit，没有调用的符号是表现呢？</p>
<h4 id="符号裁剪情况">符号裁剪情况</h4>
<p>下面表格分别统计了class和struct在没有被调用的情况下符号裁剪的情况。</p>
<h5 id="class">Class:</h5>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>class符号</th>
<th>class内部变量符号</th>
<th>class内部函数（非final修饰，非extension）</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>保留</td>
<td>保留</td>
<td>保留</td>
</tr>
<tr>
<td>非public</td>
<td>保留</td>
<td>保留</td>
<td>保留</td>
</tr>
</tbody>
</table>
<h5 id="struct">Struct:</h5>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>Struct符号</th>
<th>Struct内部变量符号</th>
<th>Struct内部函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>保留</td>
<td>保留</td>
<td>保留</td>
</tr>
<tr>
<td>非public</td>
<td>裁剪</td>
<td>裁剪</td>
<td>裁剪</td>
</tr>
</tbody>
</table>
<h5 id="enum">Enum:</h5>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>Struct符号</th>
<th>Struct内部变量符号</th>
<th>Struct内部函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>保留</td>
<td>保留</td>
<td>保留</td>
</tr>
<tr>
<td>非public</td>
<td>裁剪</td>
<td>裁剪</td>
<td>裁剪</td>
</tr>
</tbody>
</table>
<br>
<p><strong>可以看到，struct和Enum如果没有被public修饰的话，链接器很好的完成了符号裁剪的工作。另一边，class的情况就让人有所不解，即使没有被public修饰，依然全部保留了没被调用的符号。</strong><br>
<br><br>
<br></p>
<h4 id="public修饰符问题">public修饰符问题</h4>
<p>在swift中，被public修饰的符号无一例外都没有享受到符号裁剪的福利（所有有关编译选项都尝试过，均无果，如有同学了解，望告知，不胜感激），我个人倾向为这是Swift的一个已知但是没修复的bug。</p>
<p>并且16年已有人提出这个bug。苹果相关开发者回复如下：</p>
<figure data-type="image" tabindex="1"><img src="//tosv.byted.org/obj/tech/images/1598983476948_f864f5a0f6a83206733d53d61c948558" alt="" loading="lazy"></figure>
<p>当然了，目前尚未解决，故本人重新提交向swfit了一个bug issue： <a href="https://bugs.swift.org/browse/SR-12872">https://bugs.swift.org/browse/SR-12872</a></p>
<h4 id="静态函数">静态函数</h4>
<p>在swift中，class外声明的函数与class内static函数本质上没有任何区别。</p>
<p><strong>举个例子</strong></p>
<figure data-type="image" tabindex="2"><img src="//tosv.byted.org/obj/tech/images/1598987678234_c86699003ba8f66c71e9d1e3c4c4ef17.png" alt="" loading="lazy"></figure>
<p>如上图，分别分别声明了函数foo1、静态方法foo3，且并没有进行调用。使用swiftc -emit-sil -Onone（为方便展示，没开启优化）命令查看他们是如何定义:</p>
<pre><code class="language-txt">// foo1()
sil hidden @$s4main4foo1yyF : $@convention(thin) () -&gt; () {
} // end sil function '$s4main4foo1yyF'


// static MyTestClass.foo3()
sil hidden @$s4main11MyTestClassC4foo3yyFZ : $@convention(method) (@thick MyTestClass.Type) -&gt; () {
} // end sil function '$s4main11MyTestClassC4foo3yyFZ'
</code></pre>
<p>在sil中，除了以上声明代码块以外并没有找到其他地方包含关键字foo1和foo3。裁剪情况也与我们的预期一致，foo1和foo3没有调用，函数会被裁剪。</p>
<h4 id="对象方法">对象方法</h4>
<p>现在尝试查看对应对象方法在sil的情况，声明如下：</p>
<figure data-type="image" tabindex="3"><img src="//tosv.byted.org/obj/tech/images/1598987773023_df13c3cee729c028fb1b7f8e2cd484f1.png" alt="" loading="lazy"></figure>
<p>生成的sil代码块：</p>
<pre><code class="language-txt">// MyTestClass.foo4()
sil hidden @$s4main11MyTestClassC4foo4yyF : $@convention(method) (@guaranteed MyTestClass) -&gt; () {
} // end sil function '$s4main11MyTestClassC4foo4yyF'


sil_vtable MyTestClass {
  #MyTestClass.foo4!1: (MyTestClass) -&gt; () -&gt; () : @$s4main11MyTestClassC4foo4yyF	// MyTestClass.foo4()
  #MyTestClass.init!allocator.1: (MyTestClass.Type) -&gt; () -&gt; MyTestClass : @$s4main11MyTestClassCACycfC	// MyTestClass.__allocating_init()
  #MyTestClass.deinit!deallocator.1: @$s4main11MyTestClassCfD	// MyTestClass.__deallocating_deinit
}
</code></pre>
<h4 id="虚函数派发">虚函数派发</h4>
<p>与foo4关键字相关的代码块有两处，分别是foo4的函数定义和MyTestClass的vtable。由此可见，对应方法即使没有被显式调用，在sil内部依然会被相应class的vtable所引用，因此，这也是对象函数即使没有被调用也不会被裁剪的原因！</p>
<p>vtable是Swift实现多态的基础，类似于c++的虚函数表，每一个类都会维护一个函数表, 里面记录着类所有的函数, 子类的虚函数表会包括父类的虚函数表，一个子类新添加的函数, 都会被插入到这个数组的最后. 运行时会根据这一个表去决定实际要被调用的函数.</p>
<figure data-type="image" tabindex="4"><img src="//tosv.byted.org/obj/tech/images/1598988436730_80494b5be625b81a82170768e912059d.png" alt="" loading="lazy"></figure>
<p><em>这张表展示了 ParentClass 和 ChildClass 虚数表里 method1, method2, method3 在内存里的布局.</em></p>
<p>当一个函数被调用时, 会经历下面的几个过程:</p>
<ol>
<li>读取对象 <code>0xB00</code> 的函数表.</li>
<li>读取函数指针的索引. 在这里, <code>method2</code> 的索引是1(偏移量), 也就是 <code>0xB00 + 1</code>.</li>
<li>跳到 <code>0x222</code> (函数指针指向 0x222)</li>
</ol>
<p>在此不作过多阐释，有兴趣的同学可查阅相关资料文档。</p>
<h3 id="final修饰符">final修饰符</h3>
<h4 id="final修饰符的几点使用原则">final修饰符的几点使用原则</h4>
<ul>
<li><code>final</code>修饰符只能修饰类，表明该类不能被其他类继承，也就是它没资格当父类。</li>
<li><code>final</code>修饰符也可以修饰类中的属性、方法和下标，但前提是该类并没有被final修饰过。</li>
<li><code>final</code>不能修饰结构体和枚举。</li>
</ul>
<br>
<p>尝试使用final修饰对象函数。</p>
<figure data-type="image" tabindex="5"><img src="//tosv.byted.org/obj/tech/images/1598989016340_6d804ca77d963b2e0e8d5467a2bcb588.png" alt="" loading="lazy"></figure>
<p>foo4在sil中的表现：</p>
<pre><code class="language-txt">// MyTestClass.foo4()
sil hidden @$s4main11MyTestClassC4foo4yyF : $@convention(method) (@guaranteed MyTestClass) -&gt; () {
} // end sil function '$s4main11MyTestClassC4foo4yyF'

sil_vtable MyTestClass {
  #MyTestClass.init!allocator.1: (MyTestClass.Type) -&gt; () -&gt; MyTestClass : @$s4main11MyTestClassCACycfC	// MyTestClass.__allocating_init()
  #MyTestClass.deinit!deallocator.1: @$s4main11MyTestClassCfD	// MyTestClass.__deallocating_deinit
}
</code></pre>
<p>foo4已经不存在于vtable中，sil也没有引用函数foo4的地方，因此可以认为对象方法加上final关键字后与static修饰的函数表现是一致的。因此final关键字修饰的对象方法在没有被调用的情况下，能够被链接器裁减掉。</p>
<h3 id="extension">extension</h3>
<p>在此只考虑extension下的对象方法符号是否被裁剪问题，不讨论extension的其他特性。</p>
<p>先上声明：</p>
<figure data-type="image" tabindex="6"><img src="//tosv.byted.org/obj/tech/images/1598989405144_af9c0de65246c292288d3342d3326b3f.png" alt="" loading="lazy"></figure>
<p>把foo4定义到MyTestClass的extension中.</p>
<p>生成sil代码：</p>
<pre><code class="language-txt">// MyTestClass.foo4()
sil hidden @$s4main11MyTestClassC4foo4yyF : $@convention(method) (@guaranteed MyTestClass) -&gt; () {
} // end sil function '$s4main11MyTestClassC4foo4yyF'

sil_vtable MyTestClass {
  #MyTestClass.init!allocator.1: (MyTestClass.Type) -&gt; () -&gt; MyTestClass : @$s4main11MyTestClassCACycfC	// MyTestClass.__allocating_init()
  #MyTestClass.deinit!deallocator.1: @$s4main11MyTestClassCfD	// MyTestClass.__deallocating_deinit
}
</code></pre>
<p>生成的sil代码与final修饰的完全一致。因此extension下的对象方法也能享受到裁剪的福利。</p>
<h3 id="结论">结论：</h3>
<ul>
<li>被public修饰的符号一律不会被裁剪。</li>
<li>struct和enum符号能够被裁剪。</li>
<li>class外声明的函数与static修饰的函数能够被裁剪。</li>
<li>class内被final修饰的函数由于没有被vtable引用，能被裁剪。</li>
<li>extension下的函数由于不能被override，有没有被vtable引用，实际与静态函数无异，能被裁剪。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Swift无用符号裁剪情况]]></title>
        <id>https://3677065.github.io/walter/post/swift-wu-yong-fu-hao-cai-jian-qing-kuang/</id>
        <link href="https://3677065.github.io/walter/post/swift-wu-yong-fu-hao-cai-jian-qing-kuang/">
        </link>
        <updated>2020-08-29T19:16:03.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言">前言：</h3>
<p><strong>Swift作为一门编译性语言，在一些特性上的表现有点出乎我的预料。</strong></p>
<blockquote>
<p>在swift工程内部，部分被Public或者Open修饰的的符号（主要是class），即使从没被调用，即使ld参数添加了-dead_strip，export symbols设置为空， 依然也不会被strip。</p>
</blockquote>
<h3 id="我把裁剪情况简单整理了一下">我把裁剪情况简单整理了一下：</h3>
<h4 id="符号没有被调用时符号裁剪情况">符号没有被调用时符号裁剪情况:</h4>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>struct</th>
<th>class</th>
<th>enum</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>保留</td>
<td>保留</td>
<td>保留</td>
</tr>
<tr>
<td>非public</td>
<td>裁剪</td>
<td>保留</td>
<td>裁剪</td>
</tr>
</tbody>
</table>
<h5 id="class">Class:</h5>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>class符号</th>
<th>class内部变量符号</th>
<th>class内部函数符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>保留</td>
<td>保留</td>
<td>保留</td>
</tr>
<tr>
<td>非public</td>
<td>保留</td>
<td>保留</td>
<td>函数体才裁剪，函数名被保留</td>
</tr>
</tbody>
</table>
<h5 id="struct">Struct:</h5>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>Struct符号</th>
<th>Struct内部变量符号</th>
<th>Struct内部函数符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>保留</td>
<td>保留</td>
<td>保留</td>
</tr>
<tr>
<td>非public</td>
<td>裁剪</td>
<td>保留</td>
<td>函数体才裁剪，函数名被保留</td>
</tr>
</tbody>
</table>
<p>可以看到，在没有掉调用的情况下，涉及Class相关的符号，基本不会被裁剪。</p>
<hr>
<p><strong>目前已知苹果还没支持该特性，并且06年已有人提出这个bug了：</strong><br>
https://bugs.swift.org/browse/SR-521<br>
<img src="https://3677065.github.io/walter//post-images/1598730944222.png?v=1598733467560" alt="" loading="lazy"></p>
<p><strong>据测试，目前相关问题依然没有解决。故本人重新提交向swift了一个bug issue：</strong><br>
https://bugs.swift.org/browse/SR-12872</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[由TableView相关崩溃引起的关于Runloop的思考]]></title>
        <id>https://3677065.github.io/walter/post/asdfasd/</id>
        <link href="https://3677065.github.io/walter/post/asdfasd/">
        </link>
        <updated>2020-08-29T17:49:31.000Z</updated>
        <content type="html"><![CDATA[<h3 id="术语">术语：</h3>
<p><strong>Runloop</strong>: Runloop是一个事件循环对象。一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，处于这个函数内部 &quot;接受消息-&gt;等待-&gt;处理&quot; 的循环中，直到这个循环结束（比如传入 quit 的消息），函数返回。</p>
<p><strong>Tableview</strong>：iOS系统提供的列表视图，类似安卓的listView。</p>
<p><strong>一次runloop</strong>：本文一次runloop的定义是指首次进入runloop（或者runloop重新被唤醒）直到当次runloop休眠</p>
<h3 id="背景">背景:</h3>
<ol>
<li>近期在项目的崩溃案例里面发现了不少于Tableview回调方法_cellForRowAt_ 相关的数组越界崩溃，崩溃的位置位于数据源数组使用indexPath.row取值产生的数组越界崩溃。</li>
<li>不少开发者由于对runloop缺乏全面的认知，很容易使用一些有潜在风险的bug fix trick.(典型例子dispatch_async)</li>
</ol>
<h3 id="本文目标">本文目标：</h3>
<p><strong>希望通过对runloop的研究来实际找出以下三个问题的答案：</strong></p>
<blockquote>
<ol>
<li>主线程操作数据源和调用reloadData的情况下，didSelectRowAtIndexPath：回调函数内部直接使用indexPath.row下标取data是否安全？</li>
<li>不涉及子线程修改数据源的情况下，tableView: cellForRowAtIndexPath: 内部使用数据源数组是否会数组越界崩溃？</li>
<li>dispatch_async函数是否会在下一个runloop执行？</li>
</ol>
</blockquote>
<h3 id="个人思考">个人思考：</h3>
<p><strong>暂时不知道苹果出于什么考虑（也许是性能？），没有对TableView做一些同步状态的保护措施，通过下面对runloop的简单调查，发现如果使用不当，很容易在代码中埋下隐患。</strong></p>
<h3 id="runloop源码精简版">runloop源码精简版：</h3>
<p>备注1：摘自<a href="https://blog.ibireme.com/2015/05/18/runloop/">深入理解RunLoop</a><br/><br>
备注2：<a href="https://github.com/apple/swift-corelibs-foundation/blob/cfd7974982b106e40853d4cdaf772afac38730a9/CoreFoundation/RunLoop.subproj/CFRunLoop.c">苹果源码</a></p>
<pre><code>/// 用DefaultMode启动
void CFRunLoopRun(void) {
    CFRunLoopRunSpecific(CFRunLoopGetCurrent(), kCFRunLoopDefaultMode, 1.0e10, false);
}
 
/// 用指定的Mode启动，允许设置RunLoop超时时间
int CFRunLoopRunInMode(CFStringRef modeName, CFTimeInterval seconds, Boolean stopAfterHandle) {
    return CFRunLoopRunSpecific(CFRunLoopGetCurrent(), modeName, seconds, returnAfterSourceHandled);
}
 
/// RunLoop的实现
int CFRunLoopRunSpecific(runloop, modeName, seconds, stopAfterHandle) {
    
    /// 首先根据modeName找到对应mode
    CFRunLoopModeRef currentMode = __CFRunLoopFindMode(runloop, modeName, false);
    /// 如果mode里没有source/timer/observer, 直接返回。
    if (__CFRunLoopModeIsEmpty(currentMode)) return;
    
    /// 1. 通知 Observers: RunLoop 即将进入 loop。
    __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopEntry);
    
    /// 内部函数，进入loop
    __CFRunLoopRun(runloop, currentMode, seconds, returnAfterSourceHandled) {
        
        Boolean sourceHandledThisLoop = NO;
        int retVal = 0;
        do {
 
            /// 2. 通知 Observers: RunLoop 即将触发 Timer 回调。
            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeTimers);
            /// 3. 通知 Observers: RunLoop 即将触发 Source0 (非port) 回调。
            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeSources);
            /// 执行被加入的block
            __CFRunLoopDoBlocks(runloop, currentMode);
            
            /// 4. RunLoop 触发 Source0 (非port) 回调。
            sourceHandledThisLoop = __CFRunLoopDoSources0(runloop, currentMode, stopAfterHandle);
            /// 执行被加入的block
            __CFRunLoopDoBlocks(runloop, currentMode);
 
            /// 5. 如果有 Source1 (基于port) 处于 ready 状态，直接处理这个 Source1 然后跳转去处理消息。
            if (__Source0DidDispatchPortLastTime) {
                Boolean hasMsg = __CFRunLoopServiceMachPort(dispatchPort, &amp;msg)
                if (hasMsg) goto handle_msg;
            }
            
            /// 通知 Observers: RunLoop 的线程即将进入休眠(sleep)。
            if (!sourceHandledThisLoop) {
                __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopBeforeWaiting);
            }
            
            /// 7. 调用 mach_msg 等待接受 mach_port 的消息。线程将进入休眠, 直到被下面某一个事件唤醒。
            /// • 一个基于 port 的Source 的事件。
            /// • 一个 Timer 到时间了
            /// • RunLoop 自身的超时时间到了
            /// • 被其他什么调用者手动唤醒
            __CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort) {
                mach_msg(msg, MACH_RCV_MSG, port); // thread wait for receive msg
            }
 
            /// 8. 通知 Observers: RunLoop 的线程刚刚被唤醒了。
            __CFRunLoopDoObservers(runloop, currentMode, kCFRunLoopAfterWaiting);
            
            /// 收到消息，处理消息。
            handle_msg:
 
            /// 9.1 如果一个 Timer 到时间了，触发这个Timer的回调。
            if (msg_is_timer) {
                __CFRunLoopDoTimers(runloop, currentMode, mach_absolute_time())
            } 
 
            /// 9.2 如果有dispatch到main_queue的block，执行block。
            else if (msg_is_dispatch) {
                __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__(msg);
            } 
 
            /// 9.3 如果一个 Source1 (基于port) 发出事件了，处理这个事件
            else {
                CFRunLoopSourceRef source1 = __CFRunLoopModeFindSourceForMachPort(runloop, currentMode, livePort);
                sourceHandledThisLoop = __CFRunLoopDoSource1(runloop, currentMode, source1, msg);
                if (sourceHandledThisLoop) {
                    mach_msg(reply, MACH_SEND_MSG, reply);
                }
            }
            
            /// 执行加入到Loop的block
            __CFRunLoopDoBlocks(runloop, currentMode);
            
 
            if (sourceHandledThisLoop &amp;&amp; stopAfterHandle) {
                /// 进入loop时参数说处理完事件就返回。
                retVal = kCFRunLoopRunHandledSource;
            } else if (timeout) {
                /// 超出传入参数标记的超时时间了
                retVal = kCFRunLoopRunTimedOut;
            } else if (__CFRunLoopIsStopped(runloop)) {
                /// 被外部调用者强制停止了
                retVal = kCFRunLoopRunStopped;
            } else if (__CFRunLoopModeIsEmpty(runloop, currentMode)) {
                /// source/timer/observer一个都没有了
                retVal = kCFRunLoopRunFinished;
            }
            
            /// 如果没超时，mode里没空，loop也没被停止，那继续loop。
        } while (retVal == 0);
    }
    
    /// 10. 通知 Observers: RunLoop 即将退出。
    __CFRunLoopDoObservers(rl, currentMode, kCFRunLoopExit);
}
</code></pre>
<p>相信以上源代码很多人都看过，但是由于源码比较长，且涉及的内容比较多，其中一些细节其实容易被忽略。<br/></p>
<p>以上源码逻辑可以用一张图来表示：</p>
<p><img src="//tosv.byted.org/obj/tech/images/1592191232273_b27520d59efac1e2ad1517c8adad6c3b.png" alt="" loading="lazy"><br>
<em>注：流程图摘自http://mrpeak.cn/blog/ios-runloop/</em></p>
<p>这里我总结出2个比较重要的点：<br/></p>
<ol>
<li>每一次runloop的时间是不固定的，取决于单次runloop内部调用的函数的耗时，因为runloop与屏幕每秒60次的刷新率其实是没什么关系的。<br/></li>
<li>runloop在休眠之前内部有可能会多次循环，因此DoTimers、DoSources1、MainQueue、、DoBlocks有可能会在一次runloop内执行多次。<br/></li>
</ol>
<h3 id="问题1">问题1：</h3>
<blockquote>
<p>didSelectRowAtIndexPath：回调函数内部直接使用indexPath.row下标取data是否安全？</p>
</blockquote>
<p><strong>答案：不安全。</strong></p>
<p>首先可以先观察一下didSelectRowAtIndexPath：函数的调用栈：<br>
<img src="//tosv.byted.org/obj/tech/images/1592191426804_bac8d9bf267b103677a9216ae7768a1c.png" alt="" loading="lazy"></p>
<p>上图中红色下划线对应的是runloop内部的源函数，且对应的是kCFRunLoopBeforeWaiting的观察者回调，也就是说didSelectRowAtIndexPath:的回调时机是在runloop休眠之前，如果发生数组越界崩溃，也就是说此时indexPath.row的值是有问题的，那么indexPath.row的值是何时确定的呢？根据组内小伙伴@齐鸿烨 的提醒，这里的值是在触发触摸事件时确定下来的，也就是TableView的touchesBegan:withEvent:，由于 UIKit没有开源，下面通过源码和系统调用栈来尝试证明这个猜想。</p>
<p>那么touchesBegan:withEvent:的调用栈是什么样的呢？<br>
<img src="//tosv.byted.org/obj/tech/images/1592191488745_f5243228cd6c8fa683b75a0b76ddfabc.png" alt="" loading="lazy"></p>
<p>显而易见，touch事件也是通过runloop来进行处理的，且其中的调用栈为__CFRunLoopDoSources0，触摸事件时在在runloop内部当为source0去处理的。</p>
<p>根据runloop源码：</p>
<pre><code>Boolean sourceHandledThisLoop = __CFRunLoopDoSources0(rl, rlm, stopAfterHandle);
if (sourceHandledThisLoop) {
     __CFRunLoopDoBlocks(rl, rlm);
}
Boolean poll = sourceHandledThisLoop || (0ULL == timeout_context-&gt;termTSR);

...//省略中间无关代码

//里面的这行调用会决定是否 sleep，内部调用了mach_msg
__CFRunLoopServiceMachPort(waitSet, &amp;msg, sizeof(msg_buffer), &amp;livePort, poll ? 0 : TIMEOUT_INFINITY, &amp;voucherState, &amp;voucherCopy, rl, rlm);
</code></pre>
<p>综上可见如果当前runloop有source0的话（比如有触摸事件需要处理），timeout则为0，当次循环不会进入休眠。会重新执行DoSources1、MainQueue、DoTimer、DoBlocks。</p>
<p>具体的调用顺序逻辑可以看下图：<br>
<img src="//tosv.byted.org/obj/tech/images/1592191585984_92feb28b27c94ed7a7837eb2c1da9bf0.png" alt="" loading="lazy"></p>
<h4 id="结论">结论：</h4>
<blockquote>
<ol>
<li>touchesBegan:withEvent:和didSelectRowAtIndexPath：每次总是处于同一个runloop，但是两者不是同步的关系。</li>
<li>其中如果红色部分把tableview对应数据源的数组修改了，那么有可能会出现数组越界问题。</li>
</ol>
</blockquote>
<h4 id="demo试验">demo试验：</h4>
<figure data-type="image" tabindex="1"><img src="//tosv.byted.org/obj/tech/images/1592191694293_980befe6b962c88aa460c30af398ee83.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="//tosv.byted.org/obj/tech/images/1592191701520_34309751eafb5299e00cbd5020ec4501.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="//tosv.byted.org/obj/tech/images/1592191707408_a67ea8311f07e2b4d8db5c1c9abe2023.png" alt="" loading="lazy"></figure>
<p>上面demo代码的主要逻辑是制造一个0.05秒的定时器，每次回调会把tableview的数据源修改并且reloaddata，然后人工不断点击tableview来触发didSelectRowAtIndexPath：</p>
<p>上图的一个简单的复现demo崩溃时的log可证明上面的结论1，同时打印的log也基本能证实了上面关于在系统touchesBegan:withEvent: 函数内部来确定indexPath的猜想。（<em>demo见附件</em>）</p>
<hr>
<h3 id="问题2">问题2：</h3>
<blockquote>
<p>不涉及子线程修改数据源的情况下，tableView: cellForRowAtIndexPath: 内部使用数据源数组是否会数组越界崩溃？</p>
</blockquote>
<p><strong>答案：会崩溃。</strong></p>
<p>tableView: cellForRowAtIndexPath:调用栈<br>
<img src="//tosv.byted.org/obj/tech/images/1592191947273_f68c2d5d65a0cb26b030310f13313a9c.png" alt="" loading="lazy"><br>
可见tableView: cellForRowAtIndexPath:是通过__CFRunLoopDoBlocks来调用。</p>
<p>总所周知，调用reloadData内部会调用tableView: numberOfRowsInSection: ，下图调用栈可证：<br>
<img src="//tosv.byted.org/obj/tech/images/1592191976774_14f8430f51b6702bb9f222bed214e1ba.png" alt="" loading="lazy"></p>
<h4 id="case1">case1:</h4>
<figure data-type="image" tabindex="4"><img src="//tosv.byted.org/obj/tech/images/1592192014057_980befe6b962c88aa460c30af398ee83.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="//tosv.byted.org/obj/tech/images/1592192029130_100a8cb55722c726c9d44cd61cd8d5f0.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="//tosv.byted.org/obj/tech/images/1592192044871_65e42bac522031c45f754eac3a32b666.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="//tosv.byted.org/obj/tech/images/1592192055349_0a54c623cff411b6949a2a0dfe9079c1.png" alt="" loading="lazy"></figure>
<p><strong>case说明</strong>：在beforeWaiting内部修改tableview的数据源即可导致崩溃。(例如：<strong>修改完数据源后没有调用tableview的reloadData</strong>)</p>
<p>**因此只要在reloadData和runloop调用__CFRunLoopDoBlocks之间修改tableView的数据源，一样会出现数组越界的问题。<br>
**</p>
<hr>
<h3 id="问题3">问题3：</h3>
<blockquote>
<p>dispatch_async函数是否会在下一个runloop执行？</p>
</blockquote>
<p><strong>答案:不一定。</strong></p>
<p>根据上面流程图，可见MainQueue的处理分两种情况：</p>
<ul>
<li>case1：runloop休眠结束后如果有MainQueue时间，会马上进行处理。</li>
<li>case2：如果当前runloop没有进入休眠状态（比如有source0事件timer事件，mainqueue事件，source1事件），那么当前runloop会有两次时机处理Mainqueue。</li>
</ul>
<p>下面分别来证明一下：</p>
<h4 id="case1-2">case1：</h4>
<p>源代码：<br>
<img src="//tosv.byted.org/obj/tech/images/1592192325620_b21c54165920f1c233a68d1d3543bc57.png" alt="" loading="lazy"><br>
为了在runloop休眠前调用GCD，我把调用放在了case:kCFRunLoopBeforeTimers.</p>
<p>打印log：<br>
<img src="//tosv.byted.org/obj/tech/images/1592192350737_2150a75f50060e612cc1f5f05cb82244.png" alt="" loading="lazy"></p>
<p>可见runloop是在wakeup之后才执行GCD内部的代码块的，<strong>可见调用和执行不是在同一个runloop</strong>。</p>
<h3 id="case2">case2：</h3>
<p>demo源代码：<br>
<img src="//tosv.byted.org/obj/tech/images/1592192420909_555ad0d446d826a5ce75732bc206369b.png" alt="" loading="lazy"><br>
由于viewDidLoad是通过__CFRunLoopDoSources0内部调用（具体证明可直接打印调用栈，这里就不贴图了），在此处把GCD的调用放到了viewDidLoad函数内部。</p>
<p>Log:<br>
<img src="//tosv.byted.org/obj/tech/images/1592192444940_3ec667ebfe8e966e6e08d752bc2c4e27.png" alt="" loading="lazy"></p>
<p>显而易见，dispatch_async的调用和实际执行中间没有runloop休眠代码，<strong>可见调用和执行是在同一个runloop</strong>。</p>
<hr>
<p>更多Runloop研究资料可参考：<br/><br>
<a href="https://blog.ibireme.com/2015/05/18/runloop/">深入理解RunLoop</a><br/><br>
<a href="https://github.com/apple/swift-corelibs-foundation/blob/cfd7974982b106e40853d4cdaf772afac38730a9/CoreFoundation/RunLoop.subproj/CFRunLoop.c">Apple runloop源码</a><br/></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于我]]></title>
        <id>https://3677065.github.io/walter/post/about/</id>
        <link href="https://3677065.github.io/walter/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>欢迎来到我的小站呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<p>一个iOS开发者</p>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<p>写代码</p>
<h2 id="联系我呀">📬 联系我呀</h2>
<p>QQ:2509845011</p>
]]></content>
    </entry>
</feed>